import React from "react";
import { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import Seat from "./Seat";

export default function Booking() {
  //Get screeningID from location object
  const location = useLocation();
  const screeningId = location.state?.screeningId;

  if (!screeningId) {
    return <div>No data found</div>;
  }

  const [s, setS] = useState({
    bookings: [],
    occupiedSeats: [],
    occupiedSeatsView: [],
  });

  let copyOfS = { ...s };
  const set = (key, value) => {
    copyOfS[key] = value;
    setS({ ...copyOfS });
  };

  // useEffect gets only triggerd once (hard page reload) because trigger is empty []
  useEffect(() => {
    fetchBookingsOverview();
    fetchOccupiedSeats();
    console.log("useEffect called!");
  }, []);

  // total price, the date and time, all the seat numbers and booking number

  const fetchBookingsOverview = async () => {
    const response = await fetch("/api/bookings_overview");
    const data = await response.json();
    set("bookings", data);
  };
  //   {
  //   "email": "ddulanyb@yellowpages.com",
  //   "bookingNumber": "JKB018",
  //   "seats": "14, 15",
  //   "ticketTypes": "Child, Senior",
  //   "screeningId": 1,
  //   "screeningTime": "2023-05-01T16:00:00.000Z",
  //   "movie": "Crocodile Dundee",
  //   "auditorium": "Stora Salongen"
  // }

  const fetchOccupiedSeats = async () => {
    const response = await fetch("/api/occupied_seats");
    const data = await response.json();
    set("occupiedSeats", data);
    let occupiedSeatsArray = data[screeningId].occupiedSeats.split(",").map(Number);
    set("occupiedSeatsView", occupiedSeatsArray);
    console.log("occupiedSeatsArray: ", occupiedSeatsArray);
  };

  //   {
  //   "screeningId": 1,
  //   "screeningTime": "2023-05-01T16:00:00.000Z",
  //   "movie": "Crocodile Dundee",
  //   "auditorium": "Stora Salongen",
  //   "occupiedSeats": "2, 3, 12, 14, 15, 23, 24, 25, 26, 27, 50, 51, 52, 53, 54, 55, 58, 59, 66, 67, 68, 69, 70, 71, 76, 77",
  //   "occupied": 26,
  //   "total": 81,
  //   "occupiedPercent": "32"
  // }

  const pickedMovie = s.occupiedSeats.find((obj) => obj.screeningId === screeningId) || [];

  // Create a 2D array of seats
  const seats = [];
  for (let i = 0; i < 10; i++) {
    const row = [];
    for (let j = 10; j >= 1; j--) {
      row.push(i * 10 + j);
    }
    seats.push(row);
  }
  console.log(seats);

  // Define a function to check if a seat is occupied
  const isOccupied = (seatNumber) => {
    return s.occupiedSeatsView.includes(seatNumber);
  };

  // Define a function to handle seat selection
  const handleSeatSelect = (seatNumber) => {
    // Update the list of occupied seats
    set("occupiedSeatsView", [...s.occupiedSeatsView, seatNumber]);
    console.log(seatNumber);
  };

  // Render the seat table
  return (
    <div>
      <h2>Seat Booking</h2>
      <table>
        <tbody>
          {seats.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((seatNumber, seatIndex) => (
                <td key={seatIndex}>{isOccupied(seatNumber) ? <button disabled>X</button> : <button onClick={() => handleSeatSelect(seatNumber)}>{seatNumber}</button>}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}



----------------------------------------------

 //oder soll ich alles aus dem occupied nehmen und ein eigenes generieren?

  // //////////// createSeatArray
  // const createSeatObjects = (pickedMovie) => {
  //   const seats = [];

  //   for (let i = 1; i <= pickedMovie.total; i++) {
  //     const occupiedSeatsArray = data[screeningId].occupiedSeats.split(",").map(Number);
  //     const seat = {
  //       id: i,
  //       occupied: occupiedSeatsArray.includes(i),
  //       selected: false,
  //       seatType: null,
  //     };
  //     seats.push(seat);
  //   }
  //   set("pickedMoiveSeats", seats);
  //   console.log("pickedMoiveSeats", pickedMoiveSeats);
  // };

  //////////// fetchSeats
  // const fetchSeats = async () => {
  //   const response = await fetch("/api/seats");
  //   const seats = await response.json();
  //   console.log("seats: ", seats);
  //   //filter all seats by picked auditorium...
  //   const filteredSeats = seats.filter((seat) => {
  //     return seat.auditoriumId === pickedAuditorum;
  //   });

  //   set("seats", filteredSeats);
  //   console.log("filteredSeats: ", filteredSeats);

  //   //extend seats objects depending on occupiedSeats
  //   const extendedSeats = filteredSeats.map((obj) => {
  //     if (pickedMovie.occupiedSeats.includes(obj.rowNumber * obj.seatNumber)) {
  //       return (obj = { ...obj, occupied: true, selected: false, seatType: "Adult" });
  //     }
  //     return (obj = { ...obj, occupied: false, selected: false, seatType: "Adult" });
  //   });
  //   set("seats", extendedSeats);
  //   console.log(extendedSeats);
  // };

  // const modifySeats = () => {

  // {
  //   "id": 1,
  //   "rowNumber": 1,
  //   "seatNumber": 1,
  //   "auditoriumId": 1
  // },

  // Render the seat table


  ------------------------------------------
    //
  // descructure seats from props
  // const [selectedSeats, setSelectedSeats] = useState([]);

  // const handleSeatSelect = (id, isSelected) => {
  //   if (isSelected) {
  //     setSelectedSeats([...selectedSeats, id]);
  //   } else {
  //     setSelectedSeats(selectedSeats.filter((seat) => seat !== id));
  //   }
  // };

  // const handleTypeChange = (event) => {
  //   setSeatType(event.target.value);
  // };

  //I need a extra function!!! Can not directly call toggleSelect!s


    //
  // const [isOccupied, setIsOccupied] = useState(occupied);
  // const [isSelected, setIsSelected] = useState(selected);

  // //do i have to do this in seat map or booking??? and just pass this funktion along?
  // const handleClick = () => {
  //   if (!occupied) {
  //     setIsSelected(!isSelected);
  //     onSelect(id, !isSelected);
  //   }
  // };